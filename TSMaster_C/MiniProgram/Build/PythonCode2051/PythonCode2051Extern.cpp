#include "TSMaster.h"
#include "MPLibrary.h"
#include "Configuration.h"
#include "TSMasterBaseInclude.h"
#include <memory>
#include <string>
#include <vector>

// Variables definition
TTSApp app;
TTSCOM com;
TTSTest test;

// Templates Instantiation
template <>
void output<TCAN>(TCAN* canMsg) {
    com.transmit_can_async(canMsg);
}

template <>
void output<TLIN>(TLIN* linMsg) {
    com.transmit_lin_async(linMsg);
}

template <>
void output<TFlexRay>(TFlexRay* frMsg) {
    com.transmit_flexray_async(frMsg);
}

template <>
void output<TEthernetHeader>(TEthernetHeader* ethMsg) {
    com.transmit_ethernet_async(ethMsg);
}

// logger functions definition
#define TEMP_STR_LEN 1024
typedef char* va_list;
#ifndef __va_rounded_size
#define __va_rounded_size(TYPE) (((sizeof(TYPE)+sizeof(int)-1)/sizeof(int))*sizeof(int))
#endif
 
#ifndef va_start
#define va_start(AP, LASTARG)   (AP = ((char *)& (LASTARG) + __va_rounded_size(LASTARG)))
#endif
 
#ifndef va_arg
#define va_arg(AP, TYPE)        (AP += __va_rounded_size(TYPE), *((TYPE *)(AP - __va_rounded_size(TYPE))))
#endif
 
#ifndef va_end
#define va_end(AP)              (AP = (va_list)0 )
#endif

// Utility functions definition
void internal_log(const char* AFile, const char* AFunc, const s32 ALine, const TLogLevel ALevel, const char* fmt, ...)
{ 
  va_list ap;    
  va_start(ap, fmt);
  std::vector<char> buf(1024);
  int ret;  
#if __cplusplus == 201103L
  while((ret = vsnprintf_s(&buf[0], buf.size(), fmt, ap)) == -1){
#else
  // in VC++ version is 199711L, log("__cplusplus: %d\n", __cplusplus);
  while ((ret = vsnprintf_s(&buf[0], buf.size(), buf.size(), fmt, ap)) == -1) {
#endif
    buf.resize(buf.size() * 2);    
  }
  va_end(ap);
  if (ret == static_cast<int>(buf.size())){
    buf[buf.size() - 1] = '\0';    
  }         
  app.debug_log(AFile, AFunc, ALine, &buf[0], ALevel);
}

void internal_test_log(const char* AFile, const char* AFunc, const s32 ALine, const TLogLevel ALevel, const char* fmt, ...)
{ 
  va_list ap;    
  va_start(ap, fmt);
  std::vector<char> buf(1024);
  int ret;  
#if __cplusplus == 201103L
  while ((ret = vsnprintf_s(&buf[0], buf.size(), fmt, ap)) == -1) {
#else
  while ((ret = vsnprintf_s(&buf[0], buf.size(), buf.size(), fmt, ap)) == -1) {
#endif
    buf.resize(buf.size() * 2);    
  }
  va_end(ap);
  if (ret == static_cast<int>(buf.size())){
    buf[buf.size() - 1] = '\0';    
  }         
  test.debug_log_info(AFile, AFunc, ALine, &buf[0], ALevel);
}

void test_logCAN(const char* ADesc, PCAN ACAN, const TLogLevel ALevel)
{
    char s[TEMP_STR_LEN];
    // channel, id, dlc, [data]
    if (ACAN->is_tx){
        if (ACAN->is_data){
            sprintf(s, "%s %d %03X Tx d %d [%02X %02X %02X %02X %02X %02X %02X %02X]", ADesc, ACAN->FIdxChn, ACAN->FIdentifier, ACAN->FDLC, ACAN->FData[0], ACAN->FData[1], ACAN->FData[2], ACAN->FData[3], ACAN->FData[4], ACAN->FData[5], ACAN->FData[6], ACAN->FData[7]);
        } else {
            sprintf(s, "%s %d %03X Tx r %d", ADesc, ACAN->FIdxChn, ACAN->FIdentifier, ACAN->FDLC);
        }
    } else {
        if (ACAN->is_data){
            sprintf(s, "%s %d %03X Rx d %d [%02X %02X %02X %02X %02X %02X %02X %02X]", ADesc, ACAN->FIdxChn, ACAN->FIdentifier, ACAN->FDLC, ACAN->FData[0], ACAN->FData[1], ACAN->FData[2], ACAN->FData[3], ACAN->FData[4], ACAN->FData[5], ACAN->FData[6], ACAN->FData[7]);
        } else {
            sprintf(s, "%s %d %03X Rx r %d", ADesc, ACAN->FIdxChn, ACAN->FIdentifier, ACAN->FDLC);
        }
    }
    test.log_info(s, ALevel);
}

DLLEXPORT s32 __stdcall initialize_miniprogram(const PTSMasterConfiguration AConf)
{
    app = AConf->FTSApp;
    com = AConf->FTSCOM;
    test = AConf->FTSTest;
    return 0;
    
}

DLLEXPORT s32 __stdcall finalize_miniprogram(void)
{
    return 0;
    
}

// MP library functions definition

// Timers defintions
extern TMPTimerMS SendTimer;

// Python module deployment content
char cPyConsts[51961] = "";
// Python module deployment content
char cPyDatabase[37] = "ZnJvbSBUU01hc3RlciBpbXBvcnQgKg0KDQo_";
// Python module deployment content
char cPyModule[1393] = "IyBDT0RFIEJMT0NLIEJFR0lOIEdsb2JhbF9EZWZpbml0aW9ucyANCmZyb20gVFNNYXN0ZXIgaW1wb3J0ICoNCg0KDQojIENPREUgQkxPQ0sgRU5EIEdsb2JhbF9EZWZpbml0aW9ucyANCiMgQ09ERSBCTE9DSyBCRUdJTiBJbnN0YW5jZSANCkluc3RhbmNlID0gTXBJbnN0YW5jZSgnUHl0aG9uQ29kZTIwNTEnKQ0KIyBDT0RFIEJMT0NLIEVORCBJbnN0YW5jZSANCiMgQ09ERSBCTE9DSyBCRUdJTiBUaW1lciBTZW5kVGltZXIgTVFfXw0KU2VuZFRpbWVyID0gTXBUaW1lcigiUHl0aG9uQ29kZTIwNTEiLCAiU2VuZFRpbWVyIiwgMSkgIyBBdXRvIGdlbmVyYXRlZCBjb2RlLCBmb3IgbW9kaWZpY2F0aW9uIHBsZWFzZSBnb3RvIHB5dGhvbiBjb2RlIGVkaXRvcg0KIyBDT0RFIEJMT0NLIEVORCBUaW1lciBTZW5kVGltZXINCiMgQ09ERSBCTE9DSyBCRUdJTiBPbl9UaW1lciBTZW5kIFUyVnVaRlJwYldWeQ0KZGVmIG9uX3RpbWVyX1NlbmQoKSAtPiBOb25lOg0KICAgIHBhc3MNClRDQU4gZjA9ezB4MDAsMHgwMSw4LDB4MDEsMHgxQUEsMCx7MHgwMSwweDAyLDB4MDMsMHgwNCwweDA1LDB4MDYsMHgwNywweDA4fX07DQoNCg0KY29tLnRyYW5zbWl0X2NhbmZkX2FzeW5jKCZmMCk7DQovL2NvbS50cmFuc21pdF9jYW5fYXN5bmMoJmYxKTsNCg0KIyBDT0RFIEJMT0NLIEVORCBPbl9UaW1lciBTZW5kDQojIENPREUgQkxPQ0sgQkVHSU4gT25fU3RhcnQgSW5pdA0KZGVmIG9uX3N0YXJ0X0luaXQoKSAtPiBOb25lOg0KICAgIHBhc3MNCiAgICBTZW5kVGltZXIuc3RhcnQoKTsNCg0KIyBDT0RFIEJMT0NLIEVORCBPbl9TdGFydCBJbml0DQojIENPREUgQkxPQ0sgQkVHSU4gT25fU3RvcCBTdG9wDQpkZWYgb25fc3RvcF9TdG9wKCkgLT4gTm9uZToNCiAgICBwYXNzDQogICAgLy9TZW5kVGltZXIuc3RvcCgpOw0KDQojIENPREUgQkxPQ0sgRU5EIE9uX1N0b3AgU3RvcA0KIyBDT0RFIEJMT0NLIEJFR0lOIFN0ZXBfRnVuY3Rpb24gIE5RX18NCmRlZiBzdGVwKCkgLT4gTm9uZToNCiAgICBwYXNzDQoNCiMgQ09ERSBCTE9DSyBFTkQgU3RlcF9GdW5jdGlvbiANCg__";
// Retrieve TSMP abilities
typedef s32 (__stdcall* TRegTSMasterFunction)(const void* AObj, const char* AFuncType, const char* AFuncName, const char* AData, const void* AFuncPointer, const char* ADescription);
extern void step(void);
extern void on_timer_Send(void);
extern void on_start_Init(void);
extern void on_stop_Stop(void);
DLLEXPORT s32 __stdcall retrieve_mp_abilities(const void* AObj, const TRegTSMasterFunction AReg) {
  #define TSMASTER_VERSION "2025.6.26.1504"
  if (!AReg(AObj, "check_mp_internal", "version", TSMASTER_VERSION, 0, "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_app", (void *)sizeof(TTSMasterConfiguration), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_tcan", (void *)sizeof(TCAN), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_tcanfd", (void *)sizeof(TCANFD), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_tlin", (void *)sizeof(TLIN), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_tflexray", (void *)sizeof(TFlexRay), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_tethernetheader", (void *)sizeof(TEthernetHeader), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_TMPVarInt", (void *)sizeof(TMPVarInt), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_TMPVarDouble", (void *)sizeof(TMPVarDouble), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_TMPVarString", (void *)sizeof(TMPVarString), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_TMPVarCAN", (void *)sizeof(TMPVarCAN), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_TMPVarCANFD", (void *)sizeof(TMPVarCANFD), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_TMPVarLIN", (void *)sizeof(TMPVarLIN), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_TLIBTSMapping", (void *)sizeof(TLIBTSMapping), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "struct_size", "struct_size_TLIBSystemVarDef", (void *)sizeof(TLIBSystemVarDef), "")) return -1;
  if (!AReg(AObj, "check_mp_internal", "auto_start", "1", 0, "")) return -1;
  if (!AReg(AObj, "step_function", "step", "5", reinterpret_cast<const void*>(&step), "")) return -1;
  if (!AReg(AObj, "timer", "SendTimer", "1", reinterpret_cast<const void*>(&SendTimer), "")) return -1;
  if (!AReg(AObj, "on_timer_callback", "on_timer_Send", "SendTimer", reinterpret_cast<const void*>(&on_timer_Send), "")) return -1;
  if (!AReg(AObj, "on_start_callback", "on_start_Init", "", reinterpret_cast<const void*>(&on_start_Init), "")) return -1;
  if (!AReg(AObj, "on_stop_callback", "on_stop_Stop", "", reinterpret_cast<const void*>(&on_stop_Stop), "")) return -1;
  // MP library functions

  // Deploy constants
  if (!AReg(AObj, "deploy_constants", "PythonCode2051", &cPyConsts[0], 0, "")) return -1;
  // Deploy database defs
  if (!AReg(AObj, "deploy_database_defs", "PythonCode2051", &cPyDatabase[0], 0, "")) return -1;
  // Deploy python module
  if (!AReg(AObj, "deploy_python_module", "PythonCode2051", &cPyModule[0], 0, "")) return -1;
  return 5;
}
